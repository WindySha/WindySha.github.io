<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[超级实用的Android轻量级磁盘缓存工具DiskDataCacher用法以及原理]]></title>
      <url>/2018/01/15/%E8%B6%85%E7%BA%A7%E5%AE%9E%E7%94%A8%E7%9A%84Android%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98%E5%B7%A5%E5%85%B7DiskDataCacher%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><code>DiskDataCacher</code>是一个轻量级的Android磁盘缓存工具，基于LRU算法实现，同时可以设置缓存有效期，使用起来十分方便。<br>源码托管：<a href="https://github.com/WindySha/DiskDataCacher" target="_blank" rel="noopener"><code>DiskDataCacher</code></a></p>
<h2 id="工具用途"><a href="#工具用途" class="headerlink" title="工具用途"></a>工具用途</h2><ul>
<li>用于缓存网络请求返回的数据，并且可以设置缓存数据的有效期，比如，缓存时间假设为1个小时，超时1小时后再次获取缓存会自动失效，让客户端重新请求新的数据，这样可以减少客户端流量，同时减少服务器并发量。</li>
<li>用于代替<code>SharePreference</code>当做配置文件，缓存一些较大的配置数据，效率更高，可以减少内存消耗。<br>SharePreference 不能用来缓存较大数据的理由：<strong><a href="http://weishu.me/2016/10/13/sharedpreference-advices/" target="_blank" rel="noopener">请不要滥用SharedPreference</a></strong></li>
<li>支持扩展，扩展后可以缓存<code>JsonObject</code>、<code>Bitmap</code>、<code>Drawable</code>和序列化的java对象等等。<a id="more"></a>
</li>
</ul>
<h2 id="对比ASimpleCache和DiskLruCache"><a href="#对比ASimpleCache和DiskLruCache" class="headerlink" title="对比ASimpleCache和DiskLruCache"></a>对比<strong><a href="https://github.com/yangfuhai/ASimpleCache/tree/7935b04751aa57299cfb8b89e5b1e12a2d96e7cb" target="_blank" rel="noopener">ASimpleCache</a></strong>和<strong><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">DiskLruCache</a></strong></h2><p>&emsp;跟<code>ASimpleCache</code>比较，优点主要有：</p>
<ul>
<li>两者都是给予LRU（最近最少使用）算法，但<code>ASimpleCache</code>是使用HashMap实现lru，而<code>DiskDataCacher</code>是使用排序好的<code>LinkedHashMap</code>实现lru算法，查询过期数据的效率更高；</li>
<li><code>DiskDataCacher</code>对线程同步的支持更好；</li>
<li><code>DiskDataCacher</code>封装了线程池，支持异步存取。</li>
</ul>
<p>&emsp;跟<code>DiskLruCache</code>比较，优点主要有：</p>
<ul>
<li><code>DiskDataCacher</code>支持设置缓存数据的有效期，再次获取超期数据会自动清除</li>
<li><code>DiskDataCacher</code>实现方式更简单，使用更轻量，并不需要一个journal文件记录数据操作情况</li>
</ul>
<h2 id="用法简介"><a href="#用法简介" class="headerlink" title="用法简介"></a>用法简介</h2><p><code>DiskStringCacheManager</code>是专门用来缓存字符串的工具，是单例模式，一般在Application的onCreate中进行初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate() &#123;</span><br><span class="line">    super.onCreate();</span><br><span class="line">    DiskStringCacheManager.init(new File(getCacheDir(), DiskStringCacheManager.DEFAULT_CACHE_FILE_NAME),</span><br><span class="line">            DiskStringCacheManager.MAX_CACHE_SIZE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>保存数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String cacheStringValue = &quot;多线程比多任务更加有挑战。多线程是在同一个程序内部并行执行，\n&quot;;</span><br><span class="line">long maxTime = 3 * 60 * 1000;   //缓存有效期3分钟</span><br><span class="line">DiskStringCacheManager.get().putAsync(cacheKey, cacheStringValue);   //异步方式缓存, 缓存数据一直有效</span><br><span class="line">DiskStringCacheManager.get().putAsync(cacheKey, cacheStringValue, maxTime);  //异步方式缓存, 缓存数据一直有效期为3分钟</span><br><span class="line">DiskStringCacheManager.get().put(cacheKey, cacheStringValue, maxTime);   //同步方式缓存</span><br></pre></td></tr></table></figure></p>
<p>获取数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//异步方式获取</span><br><span class="line">DiskStringCacheManager.get().getAsync(cacheKey, new WeakReference&lt;DiskStringCacheManager.Callback&gt;(new DiskStringCacheManager.Callback() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void actionDone(final String result) &#123;</span><br><span class="line">                if (!TextUtils.isEmpty(result)) &#123;</span><br><span class="line">                    textView.setText(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">//同步方式获取</span><br><span class="line">String result = DiskStringCacheManager.get().get(cacheKey);</span><br></pre></td></tr></table></figure></p>
<h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><h3 id="init方法实现思路："><a href="#init方法实现思路：" class="headerlink" title="init方法实现思路："></a>init方法实现思路：</h3><p>初始化时，遍历缓存目录下的所有缓存文件，并读取出文件起始段的信息，此信息包含缓存文件大小，缓存有效期，缓存的键值，并将这些信息和缓存文件上次修改时间(LastModifiedTime)存到一个List中，然后将此list根据文件上次修改时间进行排序，排序好后，存到全局变量LinkedHashMap mCacheInfoMap中，这个map用于LRU算法获取缓存，具体的初始化实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">//先存到list中进行排序，然后再存到mCacheInfoMap中</span><br><span class="line">  List&lt;CacheInfoWithModifiedTime&gt; cacheInfoSortList = null;</span><br><span class="line">  try &#123;</span><br><span class="line">      File[] fileList = mRootDirectory.listFiles();</span><br><span class="line">      cacheInfoSortList = new ArrayList&lt;&gt;(fileList.length); //设置初始化大小，避免扩容</span><br><span class="line"></span><br><span class="line">      for (File file : fileList) &#123;</span><br><span class="line">          BufferedInputStream fis = null;</span><br><span class="line">          try &#123;</span><br><span class="line">              fis = new BufferedInputStream(new FileInputStream(file));</span><br><span class="line">              CacheInfo info = CacheInfo.readCacheInfo(fis);</span><br><span class="line">              info.size = file.length();</span><br><span class="line">              //初始化时，遇到过期的数据，需要清除掉</span><br><span class="line">              if (info.isExpiredCache()) &#123;</span><br><span class="line">                  file.delete();</span><br><span class="line">                  continue;</span><br><span class="line">              &#125;</span><br><span class="line">              long fileLastModifiedTime = file.lastModified();</span><br><span class="line">              CacheInfoWithModifiedTime infoWithModifiedTime = new CacheInfoWithModifiedTime(info, fileLastModifiedTime);</span><br><span class="line">              cacheInfoSortList.add(infoWithModifiedTime);</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              ...</span><br><span class="line">          &#125; finally &#123;</span><br><span class="line">              ...</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">      if (cacheInfoSortList != null &amp;&amp; cacheInfoSortList.size() != 0) &#123;</span><br><span class="line">          //对文件中取到的CacheInfo按照时间排序，用以实现最近最少原则</span><br><span class="line">          Collections.sort(cacheInfoSortList, new FileModifiedTimeComparator());</span><br><span class="line">          for (CacheInfoWithModifiedTime infoWithModifiedTime : cacheInfoSortList) &#123;</span><br><span class="line">              putCacheInfo(infoWithModifiedTime.info.key, infoWithModifiedTime.info);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      synchronized (mLock) &#123;</span><br><span class="line">          mInitialized = true;</span><br><span class="line">          mLock.notifyAll();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="get方法实现思路："><a href="#get方法实现思路：" class="headerlink" title="get方法实现思路："></a>get方法实现思路：</h3><p>先根据key从mCacheInfoMap中取缓存信息（mCacheInfoMap是一个LinkedHashMap，调用其get方法后，这个键值对就会添加到链表尾部成为最新的元素，以此实现LRU），然后根据key获取缓存文件名，从缓存文件中读取缓存内容，并将内容返回，以此实现get方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Entry get(String key) &#123;</span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        awaitInitializeLocked();</span><br><span class="line">        //LinkedHashMap get之后，会将此键值对移到链表尾部，以实现LRU</span><br><span class="line">        CacheInfo info = mCacheInfoMap.get(key); </span><br><span class="line">        File cachedFile = getFileForKey(key);</span><br><span class="line">        //缓存文件不存在</span><br><span class="line">        if (!cachedFile.exists()) &#123;</span><br><span class="line">            removeCacheInfo(key);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //缓存的数据已经过期</span><br><span class="line">        if (info != null &amp;&amp; info.isExpiredCache()) &#123;</span><br><span class="line">            removeCacheInfo(key);</span><br><span class="line">            cachedFile.delete();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        CountingInputStream cis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            cis = new CountingInputStream(new BufferedInputStream(new FileInputStream(cachedFile)));</span><br><span class="line">            CacheInfo fileInfo = CacheInfo.readCacheInfo(cis);</span><br><span class="line">            fileInfo.size = cachedFile.length();</span><br><span class="line">            //设置时间为了初始化时排序</span><br><span class="line">            cachedFile.setLastModified(System.currentTimeMillis());   </span><br><span class="line">            if (info == null || !info.equals(fileInfo)) &#123;   //一般不会出现这种情况</span><br><span class="line">                info = fileInfo;</span><br><span class="line">                mCacheInfoMap.put(key, info);</span><br><span class="line">            &#125;</span><br><span class="line">            byte[] data = StreamUtils.streamToBytes(cis, (int) (cachedFile.length() - cis.bytesRead));</span><br><span class="line">            return info.toCacheEntry(data);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="put方法实现思路："><a href="#put方法实现思路：" class="headerlink" title="put方法实现思路："></a>put方法实现思路：</h3><p>存储数据之前，需要先判断存储数据到本地磁盘后，是否会超出允许的最大存阈值，即mMaxCacheSizeInBytes，超出的话，就先遍历mCacheInfoMap一遍，删除所有的过期数据，再次判断是否超出最大阈值mMaxCacheSizeInBytes，超出的话，删除mCacheInfoMap中最老的数据，直到不再超出阈值，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private void trimToMaxSize(int neededSpace) &#123;</span><br><span class="line">    if (mTotalSize + neededSpace &lt; mMaxCacheSizeInBytes) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //先删除所有的过期数据</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, CacheInfo&gt;&gt; iterator = mCacheInfoMap.entrySet().iterator();</span><br><span class="line">    while (iterator.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, CacheInfo&gt; entry = iterator.next();</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        CacheInfo info = entry.getValue();</span><br><span class="line">        if (info.isExpiredCache()) &#123;</span><br><span class="line">            File file = getFileForKey(key);</span><br><span class="line">            boolean deleted = file.delete();</span><br><span class="line">            if (deleted) &#123;</span><br><span class="line">                mTotalSize -= info.size;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mTotalSize + neededSpace &lt;= mMaxCacheSizeInBytes) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //再根据Lru算法删除最老的数据，直到不超过阈值</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, CacheInfo&gt;&gt; iterator2 = mCacheInfoMap.entrySet().iterator();</span><br><span class="line">    while (iterator2.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, CacheInfo&gt; entry = iterator2.next();</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        CacheInfo info = entry.getValue();</span><br><span class="line">        File file = getFileForKey(key);</span><br><span class="line">        boolean deleted = file.delete();</span><br><span class="line">        if (deleted) &#123;</span><br><span class="line">            mTotalSize -= info.size;</span><br><span class="line">        &#125; else &#123; </span><br><span class="line">        &#125;</span><br><span class="line">        iterator2.remove();</span><br><span class="line">        if (mTotalSize + neededSpace &lt; mMaxCacheSizeInBytes * DEFAULT_LOAD_FACTOR) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>判断完成之后，就将需要存储的数据信息(CacheInfo)和数据详细内容(entry.data)依次存储到文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void put(String key, Entry entry) &#123;</span><br><span class="line">        synchronized (mLock) &#123;</span><br><span class="line">            awaitInitializeLocked();</span><br><span class="line">            trimToMaxSize(entry.data.length);</span><br><span class="line">            File file = getFileForKey(key);</span><br><span class="line">            BufferedOutputStream fos = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                fos = new BufferedOutputStream(new FileOutputStream(file));</span><br><span class="line">                CacheInfo info = new CacheInfo(key, entry);  //创建CacheInfo</span><br><span class="line">                boolean success = info.writeCacheInfo(fos);   //将CacheInfo信息写入到文件前面</span><br><span class="line">                if (!success) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                fos.write(entry.data);   //将data数据写入到文件后面</span><br><span class="line">                file.setLastModified(System.currentTimeMillis());//设置时间为了初始化时缓存排序</span><br><span class="line">                putCacheInfo(key, info);  //保存CachInfo到map中</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                boolean deleted = file.delete();</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>以上就是DiskDataCacher主要的实现思路</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>通过以上源码分析，容易知道，在get put方法一定要在初始化方法(<code>initialize()</code>)完成之后进行，因此，代码中使用了mLock.wait()和mLock.notifyAll()方法对此进行控制，<code>initialize()</code>方法最好在Application的onCreate中调用。</li>
<li>因为是磁盘缓存，当存储较大数据时，磁盘读写会比较耗时，因此需要在工作线程中执行，代码中已经封装好了一个工具<code>DiskStringCacheManager</code>，实现了对字符串的缓存以及线程池的封装。</li>
<li>需要缓存Bitmap或者JsonObject的话，只需要实现一个类似于<code>DiskStringCacheManager</code>的类，将String与byte[]的转换更改为Bitmap与byte[]的转换即可。当然，此处也有进一步的优化空间，可以将<code>DiskStringCacheManager</code>中String换成泛型，这样可以更容易扩展对其他类型数据的缓存。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LRU </tag>
            
            <tag> 磁盘缓存 </tag>
            
            <tag> DiskLruCache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gmail，OutLook账户基于Oauth2.0协议授权登录邮箱客户端的功能实现]]></title>
      <url>/2018/01/12/Gmail%EF%BC%8COutLook%E8%B4%A6%E6%88%B7%E5%9F%BA%E4%BA%8EOauth2-0%E5%8D%8F%E8%AE%AE%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E9%82%AE%E7%AE%B1%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="邮箱登录安全"><a href="#邮箱登录安全" class="headerlink" title="邮箱登录安全"></a>邮箱登录安全</h1><p>考虑到邮箱登陆的安全性，使用这种登陆方法，用户不用暴露帐号密码给我们客户端就可以进行收发邮件，google推荐用户使用网页授权登陆的方式来登陆Gmail邮箱。<br>经过研究后，得知，这种授权登陆的方式都是给予Oauth2.0协议。很多第三方的邮件客户端都已实现了给予Oauth2.0授权登陆这一功能，例如：</p>
<p>WPS邮箱,QQ邮箱，网易邮箱大师实现了gmail的授权登陆<br>WeMail，myMail等客户端实现了gmail和outlook的授权登陆<br>微软的Outlook客户端实现了gmail,outlook，yahoo,office365的授权登陆<br>ios邮件实现了gmail,yahoo的授权登陆</p>
<h1 id="Oauth2-0协议流程"><a href="#Oauth2-0协议流程" class="headerlink" title="Oauth2.0协议流程"></a>Oauth2.0协议流程</h1><p>经研究，发现整个流程就是基于Oauth2.0协议和Imap协议的。Oauth2.0授权登陆流程具体如下：</p>
<p>Oauth2.0授权模式有多种，这里使用简化模式登陆最方便。<br>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。<br><a id="more"></a></p>
<p>它的步骤如下：<br>（A）客户端将用户导向认证服务器。<br>（B）用户决定是否给于客户端授权。<br>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。<br>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。<br>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。<br>（F）浏览器执行上一步获得的脚本，提取出令牌。<br>（G）浏览器将令牌发给客户端。</p>
<p>下面是上面这些步骤所需要的参数。<br>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<blockquote>
<p>response_type：表示授权类型，此处的值固定为”token”，必选项。<br>client_id：表示客户端的ID，必选项。<br>redirect_uri：表示重定向的URI，可选项。<br>scope：表示权限范围，可选项。<br>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</p>
</blockquote>
<p>C步骤中，认证服务器回应客户端的URI，包含以下参数：</p>
<blockquote>
<p>access_token：表示访问令牌，必选项。<br>token_type：表示令牌类型，该值大小写不敏感，必选项。<br>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。<br>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。<br>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须，一模一样包含这个参数。</p>
</blockquote>
<p>如果用户访问的时候，客户端的”访问令牌”已经过期，则需要使用”更新令牌”申请一个新的访问令牌。<br>客户端发出更新令牌的HTTP请求，包含以下参数：</p>
<blockquote>
<p>granttype：表示使用的授权模式，此处的值固定为”refreshtoken”，必选项。<br>refresh_token：表示早前收到的更新令牌，必选项。<br>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数则表示与上一次一致。</p>
</blockquote>
<h1 id="使用Oauth2-0协议登陆Outlook的实现概述"><a href="#使用Oauth2-0协议登陆Outlook的实现概述" class="headerlink" title="使用Oauth2.0协议登陆Outlook的实现概述"></a>使用Oauth2.0协议登陆Outlook的实现概述</h1><p>基于这个流程，我们先尝试实现Outlook.com的授权登陆。<br>在此之前，查阅了大量microsoft提供给开发者的帮助文档：</p>
<blockquote>
<p>1.用C#和VB实现的例子 OAuth 2.0 for Microsoft Accounts (installed applications)：<br><a href="http://www.afterlogic.com/mailbee-net/docs/OAuth2MicrosoftRegularAccountsInstalledApps.html#RegisterMicrosoft" target="_blank" rel="noopener">http://www.afterlogic.com/mailbee-net/docs/OAuth2MicrosoftRegularAccountsInstalledApps.html#RegisterMicrosoft</a><br>2.Windows Live Connect实现oauth2.0协议流程：<br><a href="https://msdn.microsoft.com/en-us/library/hh243647.aspx#" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/hh243647.aspx#</a><br>3.Oauth2.0 scope参数详解<br><a href="https://msdn.microsoft.com/en-us/library/hh243646.aspx#accessing" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/hh243646.aspx#accessing</a><br>4.Live SDK developer guide：<br><a href="https://msdn.microsoft.com/en-us/library/hh243641.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/hh243641.aspx</a><br>5.获取用户info文档<br><a href="https://msdn.microsoft.com/en-us/library/hh826533.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/hh826533.aspx</a><br>6.Connect to Outlook.com IMAP using OAuth 2.0<br><a href="https://msdn.microsoft.com/en-us/library/dn440163.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/dn440163.aspx</a></p>
</blockquote>
<p>通过对这写文档的仔细阅读，可以得知，microsoft账户授权登陆的参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auth_endpoint=&quot;https://login.live.com/oauth20_authorize.srf&quot;</span><br><span class="line">token_endpoint=&quot;https://login.live.com/oauth20_token.srf&quot;</span><br><span class="line">refresh_endpoint=&quot;https://login.live.com/oauth20_token.srf&quot;</span><br><span class="line">response_type=&quot;code&quot;</span><br><span class="line">redirect_uri=&quot;https://login.live.com/oauth20_desktop.srf&quot;</span><br><span class="line">scope=&quot;wl.basic wl.offline_access wl.emails wl.imap&quot;</span><br><span class="line">state=&quot;state&quot;</span><br><span class="line">client_id=&quot;000000004C187996&quot;</span><br><span class="line">client_secret=&quot;YzfVeh1WllDzBuC7-t9lrhPM5AGrqXfX&quot;</span><br></pre></td></tr></table></figure></p>
<p>其中的client_id和client_secret需要先创建一个微软账户，然后登陆微软的Live.com Developer Center：<a href="https://account.live.com/developers/applications/" target="_blank" rel="noopener">https://account.live.com/developers/applications/</a></p>
<p>建立一个 applications，就可以取到合法的client_id和client_secret。</p>
<p>通过上面的参数使用Http Post，向服务器请求，就可以得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">&quot;expires_in&quot;:3600,</span><br><span class="line">&quot;scope&quot;:&quot;wl.basic wl.offline_access wl.emails wl.imap wl.signin&quot;,</span><br><span class="line"></span><br><span class="line">&quot;access_token&quot;:&quot;EwCIAq1DBAAUGCCXc8wU/zFu9QnLdZXy+YnElFkAAednF24XQXBC+PBhDpfx2c7Z5/XKYAbNlItHSvK/CAuEhAew1YXyMGKUGHoe3g+mqEHQJO+eQqt/RFNnr7XY0362G/2FoSbClPl1s4YPs+oBF8vPlWlKl+5ORydw6i7AmzyxSO7Dz/IXlbtRoHYERgZayEYyJBNRd+7thcKivCtyHrpQI25Ue/jY+KIJEVMRzj35Ujjc3IbbSXkG8AEztyKmI/vDMHU2rRqYffmbZG3w7eGP1a4kB&quot;,</span><br><span class="line"></span><br><span class="line">&quot;refresh_token&quot;:&quot;MCdn2!RmPgwz9FbjIlFiqygD4uEMdCoFPEWpxoT4GB6gILh9VzgF8hM2FMNyjrnHsjGR0LlH0LaS0BT4LowsI7Q$&quot;,</span><br><span class="line">&quot;user_id&quot;:&quot;d9f34c758d648aac466bf1f40766ad7a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>里面包含我们需要的授权令牌access_token，和刷新令牌refresh_token。</p>
<p>但是，里面却没有包含用户的邮箱地址以及用户名，而邮箱地址是客户端一定需要的一个参数。<br>通过阅读文档：<a href="https://msdn.microsoft.com/en-us/library/hh826533.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/hh826533.aspx</a></p>
<p>可以通过HTTP GET <a href="https://apis.live.net/v5.0/me?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://apis.live.net/v5.0/me?access_token=ACCESS_TOKEN</a><br>向服务器请求用户的信息。</p>
<p>最后，也是最终要的步骤，就是如何通过授权令牌access_token来进行收发邮件，收邮件是用Imap协议，发送用Smpt协议<br>microsoft对此也有帮助文档：<a href="https://msdn.microsoft.com/en-us/library/dn440163.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/dn440163.aspx</a></p>
<p>上图就是封装access_token的方法，<br>具体的代码实现为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">final String accessToken = AuthenticationCache.getInstance().retrieveAccessToken(</span><br><span class="line">        mImapStore.getContext(), mImapStore.getAccount());</span><br><span class="line">if (mLoginPhrase == null || !TextUtils.equals(mAccessToken, accessToken)) &#123;</span><br><span class="line">    mAccessToken = accessToken;</span><br><span class="line">    final String oauthCode = &quot;user=&quot; + mImapStore.getUsername() + &apos;\001&apos; +</span><br><span class="line">            &quot;auth=Bearer &quot; + mAccessToken + &apos;\001&apos; + &apos;\001&apos;;</span><br><span class="line">    mLoginPhrase = ImapConstants.AUTHENTICATE + &quot; &quot; + ImapConstants.XOAUTH2 + &quot; &quot; +</span><br><span class="line">            Base64.encodeToString(oauthCode.getBytes(), Base64.NO_WRAP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面就是使用Oauth2.0实现登陆Outlook基本流程，希望能对你有所帮助。</p>
]]></content>
      
        
        <tags>
            
            <tag> Oauth2.0 </tag>
            
            <tag> Android邮箱客户端 </tag>
            
            <tag> Imap协议 </tag>
            
            <tag> gmail </tag>
            
            <tag> outlook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[详解基于LRU缓存的LruCache类及其在Android内存优化中的应用]]></title>
      <url>/2018/01/12/%E8%AF%A6%E8%A7%A3%E5%9F%BA%E4%BA%8ELRU%E7%BC%93%E5%AD%98%E7%9A%84LruCache%E7%B1%BB%E5%8F%8A%E5%85%B6%E5%9C%A8Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>今天与大家分享一下图片的缓存技术，利用它可以提高UI的流畅性、响应速度，给用户好的体验。</p>
<p>如何在内存中做缓存？</p>
<p>通过内存缓存可以快速加载缓存图片，但会消耗应用的内存空间。LruCache类（通过兼容包可以支持到sdk4）很适合做图片缓存，它通过LinkedHashMap保持图片的强引用方式存储图片，当缓存空间超过设置定的限值时会释放掉早期的缓存。</p>
<p>  注：在过去，常用的内存缓存实现是通过SoftReference或WeakReference，但不建议这样做。从Android2.3（API等级9）垃圾收集器开始更积极收集软/弱引用，这使得它们相当无效。此外，在Android 3.0（API等级11）之前，存储在native内存中的可见的bitmap不会被释放，可能会导致应用程序暂时地超过其内存限制并崩溃。</p>
<p>什么是LruCache？<br>LruCache实现原理是什么？   </p>
<p>要回答这个两个问题，先要知道什么是LRU。<br>LRU是Least Recently Used 的缩写，翻译过来就是“最近最少使用”，LRU缓存就是使用这种原理实现，简单的说就是缓存一定量的数据，当超过设定的阈值时就把一些过期的数据删除掉，比如我们缓存100M的数据，当总数据小于100M时可以随意添加，当超过100M时就需要把新的数据添加进来，同时要把过期数据删除，以确保我们最大缓存100M，那怎么确定删除哪条过期数据呢，采用LRU算法实现的话就是将最老的数据删掉。利用LRU缓存，我们能够提高系统的performance.<br><a id="more"></a></p>
<h1 id="LruCache源码分析"><a href="#LruCache源码分析" class="headerlink" title="LruCache源码分析"></a>LruCache源码分析</h1><p>LruCache.java是 android.support.v4包引入的一个类，其实现原理就是基于LRU缓存算法，<br>要想实现LRU缓存，我们首先要用到一个类 LinkedHashMap。 用这个类有两大好处：一是它本身已经实现了按照访问顺序的存储，也就是说，最近读取的会放在最前面，最不常读取的会放在最后（当然，它也可以实现按照插入顺序存储）。第二，LinkedHashMap本身有一个方法用于判断是否需要移除最不常读取的数，但是，原始方法默认不需要移除（这是，LinkedHashMap相当于一个linkedlist），所以，我们需要override这样一个方法，使得当缓存里存放的数据个数超过规定个数后，就把最不常用的移除掉。LinkedHashMap的API写得很清楚，推荐大家可以先读一下。<br>要基于LinkedHashMap来实现LRU缓存，可以选择inheritance, 也可以选择 delegation， android源码选择的是delegation，而且写得很漂亮。下面，就来剖析一下源码的实现方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">public class LruCache&lt;K, V&gt; &#123;</span><br><span class="line">    //缓存 map 集合，要用LinkedHashMap    </span><br><span class="line">    private final LinkedHashMap&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line">    private int size; //已经存储的大小</span><br><span class="line">    private int maxSize; //规定的最大存储空间</span><br><span class="line">  </span><br><span class="line">    private int putCount;  //put的次数</span><br><span class="line">    private int createCount;  //create的次数</span><br><span class="line">    private int evictionCount;  //回收的次数</span><br><span class="line">    private int hitCount;  //命中的次数</span><br><span class="line">    private int missCount;  //丢失的次数</span><br><span class="line"></span><br><span class="line">    //实例化 Lru，需要传入缓存的最大值,这个最大值可以是个数，比如对象的个数，也可以是内存的大小</span><br><span class="line">    //比如，最大内存只能缓存5兆</span><br><span class="line">    public LruCache(int maxSize) &#123;</span><br><span class="line">        if (maxSize &lt;= 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;maxSize &lt;= 0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.maxSize = maxSize;</span><br><span class="line">        this.map = new LinkedHashMap&lt;K, V&gt;(0, 0.75f, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   //重置最大存储空间</span><br><span class="line">    public void resize(int maxSize) &#123;</span><br><span class="line">        if (maxSize &lt;= 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;maxSize &lt;= 0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            this.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //通过key返回相应的item，或者创建返回相应的item。相应的item会移动到队列的头部，</span><br><span class="line">    // 如果item的value没有被cache或者不能被创建，则返回null。</span><br><span class="line">    public final V get(K key) &#123;</span><br><span class="line">        if (key == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;key == null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V mapValue;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            mapValue = map.get(key);</span><br><span class="line">            if (mapValue != null) &#123;</span><br><span class="line">                hitCount++;</span><br><span class="line">                return mapValue;</span><br><span class="line">            &#125;</span><br><span class="line">            missCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //如果丢失了就试图创建一个item</span><br><span class="line">        V createdValue = create(key);</span><br><span class="line">        if (createdValue == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            createCount++;</span><br><span class="line">            mapValue = map.put(key, createdValue);</span><br><span class="line"></span><br><span class="line">            if (mapValue != null) &#123;</span><br><span class="line">                // There was a conflict so undo that last put</span><br><span class="line">                map.put(key, mapValue);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                size += safeSizeOf(key, createdValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (mapValue != null) &#123;</span><br><span class="line">            entryRemoved(false, key, createdValue, mapValue);</span><br><span class="line">            return mapValue;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            trimToSize(maxSize);</span><br><span class="line">            return createdValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建cache项，并将创建的项放到队列的头部</span><br><span class="line">    public final V put(K key, V value) &#123;</span><br><span class="line">        if (key == null || value == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;key == null || value == null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V previous;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            putCount++;</span><br><span class="line">            size += safeSizeOf(key, value);</span><br><span class="line">            previous = map.put(key, value);</span><br><span class="line">            if (previous != null) &#123;  //返回的先前的value值</span><br><span class="line">                size -= safeSizeOf(key, previous);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (previous != null) &#123;</span><br><span class="line">            entryRemoved(false, key, previous, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        trimToSize(maxSize);</span><br><span class="line">        return previous;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //清空cache空间</span><br><span class="line">    public void trimToSize(int maxSize) &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            K key;</span><br><span class="line">            V value;</span><br><span class="line">            synchronized (this) &#123;</span><br><span class="line">                if (size &lt; 0 || (map.isEmpty() &amp;&amp; size != 0)) &#123;</span><br><span class="line">                    throw new IllegalStateException(getClass().getName()</span><br><span class="line">                            + &quot;.sizeOf() is reporting inconsistent results!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (size &lt;= maxSize || map.isEmpty()) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Map.Entry&lt;K, V&gt; toEvict = map.entrySet().iterator().next();</span><br><span class="line">                key = toEvict.getKey();</span><br><span class="line">                value = toEvict.getValue();</span><br><span class="line">                map.remove(key);</span><br><span class="line">                size -= safeSizeOf(key, value);</span><br><span class="line">                evictionCount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            entryRemoved(true, key, value, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //删除key相应的cache项，返回相应的value</span><br><span class="line">    public final V remove(K key) &#123;</span><br><span class="line">        if (key == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;key == null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        V previous;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            previous = map.remove(key);</span><br><span class="line">            if (previous != null) &#123;</span><br><span class="line">                size -= safeSizeOf(key, previous);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (previous != null) &#123;</span><br><span class="line">            entryRemoved(false, key, previous, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return previous;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Called for entries that have been evicted or removed. This method is</span><br><span class="line">     * invoked when a value is evicted to make space, removed by a call to</span><br><span class="line">     * &#123;@link #remove&#125;, or replaced by a call to &#123;@link #put&#125;. The default</span><br><span class="line">     * implementation does nothing.</span><br><span class="line">     * 当item被回收或者删掉时调用。改方法当value被回收释放存储空间时被remove调用，</span><br><span class="line">     * 或者替换item值时put调用，默认实现什么都没做</span><br><span class="line">     * &lt;p&gt;The method is called without synchronization: other threads may</span><br><span class="line">     * access the cache while this method is executing.</span><br><span class="line">     *</span><br><span class="line">     * @param evicted true if the entry is being removed to make space, false</span><br><span class="line">     *     if the removal was caused by a &#123;@link #put&#125; or &#123;@link #remove&#125;.</span><br><span class="line">     *  true---为释放空间被删除；false---put或remove导致</span><br><span class="line">     * @param newValue the new value for &#123;@code key&#125;, if it exists. If non-null,</span><br><span class="line">     *     this removal was caused by a &#123;@link #put&#125;. Otherwise it was caused by</span><br><span class="line">     *     an eviction or a &#123;@link #remove&#125;.</span><br><span class="line">     */</span><br><span class="line">    protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    //当某Item丢失时会调用到，返回计算的相应的value或者null</span><br><span class="line">    protected V create(K key) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int safeSizeOf(K key, V value) &#123;</span><br><span class="line">        int result = sizeOf(key, value);</span><br><span class="line">        if (result &lt; 0) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;Negative size: &quot; + key + &quot;=&quot; + value);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //这个方法要特别注意，跟我们实例化LruCache的maxSize要呼应，怎么做到呼应呢，比如maxSize的大小为缓存 </span><br><span class="line">    //的个数，这里就是return 1就ok，如果是内存的大小，如果5M，这个就不能是个数了，就需要覆盖这个方法，返回每个缓存 </span><br><span class="line">    //value的size大小，如果是Bitmap，这应该是bitmap.getByteCount();</span><br><span class="line">    protected int sizeOf(K key, V value) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //清空cacke</span><br><span class="line">    public final void evictAll() &#123;</span><br><span class="line">        trimToSize(-1); // -1 will evict 0-sized elements</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * For caches that do not override &#123;@link #sizeOf&#125;, this returns the number</span><br><span class="line">     * of entries in the cache. For all other caches, this returns the sum of</span><br><span class="line">     * the sizes of the entries in this cache.</span><br><span class="line">     */</span><br><span class="line">    public synchronized final int size() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized final int maxSize() &#123;</span><br><span class="line">        return maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the number of times &#123;@link #get&#125; returned a value that was</span><br><span class="line">     * already present in the cache.</span><br><span class="line">     */</span><br><span class="line">    public synchronized final int hitCount() &#123;</span><br><span class="line">        return hitCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns the number of times &#123;@link #get&#125; returned null or required a new</span><br><span class="line">     * value to be created.</span><br><span class="line">     */</span><br><span class="line">    public synchronized final int missCount() &#123;</span><br><span class="line">        return missCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized final int createCount() &#123;</span><br><span class="line">        return createCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized final int putCount() &#123;</span><br><span class="line">        return putCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //返回被回收的数量</span><br><span class="line">    public synchronized final int evictionCount() &#123;</span><br><span class="line">        return evictionCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //返回当前cache的副本，从最近最少访问到最多访问</span><br><span class="line">    public synchronized final Map&lt;K, V&gt; snapshot() &#123;</span><br><span class="line">        return new LinkedHashMap&lt;K, V&gt;(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override public synchronized final String toString() &#123;</span><br><span class="line">        int accesses = hitCount + missCount;</span><br><span class="line">        int hitPercent = accesses != 0 ? (100 * hitCount / accesses) : 0;</span><br><span class="line">        return String.format(&quot;LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]&quot;,</span><br><span class="line">                maxSize, hitCount, missCount, hitPercent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从源代码中，我们可以清晰的看出LruCache的缓存机制。<br>此外，还有一个开源的使用磁盘缓存的方法DiskLruCache，源代码：<a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">https://github.com/JakeWharton/DiskLruCache</a><br>其详细的使用方法可以参考链接：<a href="http://www.tuicool.com/articles/JB7RNj" target="_blank" rel="noopener">http://www.tuicool.com/articles/JB7RNj</a></p>
<h1 id="LruCache应用实例"><a href="#LruCache应用实例" class="headerlink" title="LruCache应用实例"></a>LruCache应用实例</h1><p>根据上面的代码，当我们用LruCache来缓存图片时，一定要重写<code>protected int sizeOf(K key, V value) {}</code>方法，否则，最大缓存的是数量而不是占用内存大小。重写<code>protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue) {}</code>方法，在里面处理内存回收。<br>下面例子继承LruCache，实现相关方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class BitmapCache&lt;K, V extends Bitmap&gt; extends LruCache&lt;K, V&gt;&#123;</span><br><span class="line">	private BitmapRemovedCallBack mEnterRemovedCallBack;</span><br><span class="line"></span><br><span class="line">	public BitmapCache(int maxSize, BitmapRemovedCallBack callBack) &#123;</span><br><span class="line">		super(maxSize);</span><br><span class="line">		mEnterRemovedCallBack = callBack;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    //当缓存大于我们设定的最大值时，会调用这个方法，我们在这里面做内存释放操作</span><br><span class="line">	@Override</span><br><span class="line">	protected void entryRemoved(boolean evicted, K key, V oldValue, V newValue) &#123;</span><br><span class="line">		super.entryRemoved(evicted, key, oldValue, newValue);</span><br><span class="line">		if (evicted &amp;&amp; oldValue != null)&#123;</span><br><span class="line">		//在回收bitmap之前，务必要先在下面的回调方法中将bitmap设给的View的bitmapDrawable设为null</span><br><span class="line">		//否则，bitmap被回收后，很容易出现cannot draw recycled bitmap的报错。切记！</span><br><span class="line">			mEnterRemovedCallBack.onBitmapRemoved(key);</span><br><span class="line">			oldValue.recycle();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    //获取每个 value 的大小</span><br><span class="line">	@Override</span><br><span class="line">	protected int sizeOf(K key, V value) &#123;</span><br><span class="line">		int size = 0;</span><br><span class="line">		if (value != null) &#123;</span><br><span class="line">			size = value.getByteCount();</span><br><span class="line">		&#125;</span><br><span class="line">		return size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public interface BitmapRemovedCallBack&lt;K&gt;&#123;</span><br><span class="line">		void onBitmapRemoved(K key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用BitmapCache时，在构造方法中传入最大缓存量和一个回掉方法就行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private BitmapCache&lt;String, Bitmap&gt; mMemoryCache;  </span><br><span class="line"></span><br><span class="line">private BitmapCache.BitmapRemovedCallBack&lt;String&gt; mEnteryRemovedCallBack =</span><br><span class="line">			new BitmapCache.BitmapRemovedCallBack&lt;String&gt;() &#123;</span><br><span class="line">		@Override</span><br><span class="line">		public void onBitmapRemoved(String key) &#123;</span><br><span class="line">		//处理回收bitmap前，清空相关view的bitmap操作			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123; </span><br><span class="line">    // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。 </span><br><span class="line">    // BitmapCache通过构造函数传入缓存值，以bit为单位。 </span><br><span class="line">    int memClass = ((ActivityManager) activity.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();</span><br><span class="line">    // 使用单个应用最大可用内存值的1/8作为缓存的大小。 </span><br><span class="line">    int cacheSize = 1024 * 1024 * memClass / 8;</span><br><span class="line">    mMemoryCache = new BitmapCache&lt;String, Bitmap&gt;(cacheSize， mEnteryRemovedCallBack);</span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">public void addBitmapToMemoryCache(String key, Bitmap bitmap) &#123; </span><br><span class="line">    if (getBitmapFromMemCache(key) == null) &#123; </span><br><span class="line">        mMemoryCache.put(key, bitmap); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">public Bitmap getBitmapFromMemCache(String key) &#123; </span><br><span class="line">    return mMemoryCache.get(key); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当向 ImageView 中加载一张图片时,首先会在 BitmapCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程来加载这张图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void loadBitmap(int resId, ImageView imageView) &#123; </span><br><span class="line">    final String imageKey = String.valueOf(resId); </span><br><span class="line">    final Bitmap bitmap = getBitmapFromMemCache(imageKey); </span><br><span class="line">    if (bitmap != null) &#123; </span><br><span class="line">        imageView.setImageBitmap(bitmap); </span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        imageView.setImageResource(R.drawable.image_placeholder); </span><br><span class="line">        BitmapLoadingTask task = new BitmapLoadingTask(imageView); </span><br><span class="line">        task.execute(resId); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>BitmapLoadingTask后台线程，把新加载出来的图片以键值对形式放到缓存中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class BitmapLoadingTask extends AsyncTask&lt;Integer, Void, Bitmap&gt; &#123; </span><br><span class="line">    // 在后台加载图片。 </span><br><span class="line">    @Override</span><br><span class="line">    protected Bitmap doInBackground(Integer... params) &#123; </span><br><span class="line">        final Bitmap bitmap = decodeSampledBitmapFromResource( </span><br><span class="line">                getResources(), params[0], 100, 100); </span><br><span class="line">        addBitmapToMemoryCache(String.valueOf(params[0]), bitmap); </span><br><span class="line">        return bitmap; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1、LruCache 是基于 Lru算法实现的一种缓存机制；<br>2、Lru算法的原理是把近期最少使用的数据给移除掉，当然前提是当前数据的量大于设定的最大值。<br>3、LruCache 没有真正的释放内存，只是从 Map中移除掉数据，真正释放内存还是要用户手动释放。<br>4、手动释放bitmap的内存时，需要先清除相关view中的bitmap。</p>
]]></content>
      
        
        <tags>
            
            <tag> LRU </tag>
            
            <tag> LruCache </tag>
            
            <tag> 缓存技术 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
